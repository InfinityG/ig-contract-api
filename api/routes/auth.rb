require 'sinatra/base'
require './api/services/config_service'
require './api/services/token_service'

module Sinatra
  module AuthRoutes
    def self.registered(app)

      #this filter applies to everything except options, registration of new users and documentation
      app.before do
        if (request.request_method == 'OPTIONS') ||
            (request.request_method == 'POST' && request.path_info == '/users') ||
            (request.request_method == 'POST' && request.path_info == '/tokens')
          return
        else
          auth_header = env['HTTP_AUTHORIZATION']

          is_static = lambda { |path|
            return true if path == '/'
            return true if path == '/favicon.ico'
            return true if path.include? '/docs'
            return true if path.include? '/fonts/'
            return true if path.include? '/css/'
            return true if path.include? '/js/'
            return true if path.include? '/images/'
            false
          }

          unless is_static.call(request.path_info)

            # all other routes are the API - these require an Authorization token

            if auth_header == nil
              halt 401, 'Unauthorized!'
            end

            # the auth token to be used here is generated by the following process:
            #   1. a user logs in to ID-IO with username/password OR username/signed challenge
            #   2. the resulting auth payload received from ID-IO
            #       is then POSTed to the /tokens route of the contract API
            #   3. the contract API then decrypts and generates an access token
            #   4. this access token is placed in the Authorization header of subsequent requests
            #       and used here:

            token = TokenService.new.get_token(auth_header)

            if token == nil
              (halt 401, 'Unauthorized!')
            else
              # the current user context is set using the user id of the token
              user = UserService.new.get_by_id token[:user_id]

              @current_user_id = token[:user_id]
              @current_user_role = user[:role]
            end
          end
        end
      end

    end
  end

  register AuthRoutes
end